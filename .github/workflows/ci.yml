name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


    
jobs:
  build:
    name: Test y Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"
    - name: Instalar Poetry y tox
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        pip install tox

    - name: Test y build con Poetry en tox
      run: poetry run tox

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Despliegue en Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
          service-id: ${{ secrets.SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
    - name: Esperar estado final
      env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.SERVICE_ID }}
      run: |
          # 1. Obtener el último deploy
          DEPLOYS_RESPONSE=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
            "https://api.render.com/v1/services/$SERVICE_ID/deploys")
          DEPLOY_ID=$(echo "$DEPLOYS_RESPONSE" | jq -r '.[0].deploy.id')

          
          # 2. Esperar cambio de estado 
          for i in {1..30}; do
            DEPLOY_INFO=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
              "https://api.render.com/v1/services/$SERVICE_ID/deploys/$DEPLOY_ID")
            CURRENT_STATUS=$(echo "$DEPLOY_INFO" | jq -r '.status')
            if [ "$CURRENT_STATUS" = "live" ]; then
              echo "✅ Despliegue exitoso"
              exit 0
            elif [[ "$CURRENT_STATUS" =~ ^(failed|canceled|crashed)$ ]]; then
              echo "❌ Falló: $CURRENT_STATUS"
              exit 1
            fi
            echo "esperando despliegue..."
            sleep 10
          done
          echo "Timeout: No cambió a estado final en 5 minutos"
          exit 1

  notify:
    name: Enviar notificaciones
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Slack notifica éxito
        if: ${{ needs.build.result == 'success' && needs.deploy.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "✅ El pipeline de CI/CD se completó con éxito!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Slack notifica fracaso
        if: ${{ needs.build.result == 'failure' || needs.deploy.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "❌ El pipeline de CI/CD falló. Por favor, revisá los logs."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
  update-jira:
    needs: [build,deploy]
    runs-on: ubuntu-latest
    if: ${{ needs.build.result == 'success' && needs.deploy.result == 'success' }}
    steps:
      - uses: actions/checkout@v4
      - name: Extract Jira Issue
        id: extract
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ $COMMIT_MSG =~ ([A-Z]+-[0-9]+) ]]; then
            echo "issue=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
          fi

      - name: Get Jira Transitions
        id: transitions
        
        if: steps.extract.outputs.issue != ''
        env: 
          JIRA_URL: ${{secrets.JIRA_URL}}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
          JIRA_TOKEN: ${{ secrets.TOKEN_API_JIRA }}
          ISSUE_KEY: ${{ steps.extract.outputs.issue }}
        run: |
          # Obtener transiciones disponibles
          RESPONSE=$(curl -s -u "$JIRA_EMAIL:$JIRA_TOKEN" \
          -H "Accept: application/json" \
          "$JIRA_URL/rest/api/2/issue/$ISSUE_KEY/transitions")

          # Extraer IDs de transiciones
          IN_PROGRESS_ID=$(echo "$RESPONSE" | jq -r '.transitions[] | select(.name=="En curso") | .id')
          DONE_ID=$(echo "$RESPONSE" | jq -r '.transitions[] | select(.name=="Listo") | .id')

          echo "in_progress_id=$IN_PROGRESS_ID" >> "$GITHUB_OUTPUT"
          echo "done_id=$DONE_ID" >> "$GITHUB_OUTPUT"

          
      - name: Update Jira Issue to In Progress
        if: contains(github.event.head_commit.message, 'Iniciando') || contains(github.event.head_commit.message, 'Iniciar')
        run: |
          JIRA_URL="${{ secrets.JIRA_URL }}"
          JIRA_EMAIL="${{ secrets.JIRA_EMAIL }}"
          JIRA_TOKEN="${{ secrets.JIRA_API_TOKEN }}"
          ISSUE_KEY="${{ steps.extract.outputs.issue }}"
          TRANSITION_ID="${{ steps.transitions.outputs.in_progress_id }}"
          
          curl -s -u "$JIRA_EMAIL:$JIRA_TOKEN" \
            -X POST \
            -H "Content-Type: application/json" \
            -d "{\"transition\":{\"id\":\"$TRANSITION_ID\"}}" \
            "$JIRA_URL/rest/api/2/issue/$ISSUE_KEY/transitions"

      - name: Update Jira Issue to Done
        if: contains(github.event.head_commit.message, 'Completando') || contains(github.event.head_commit.message, 'Completar') || contains(github.event.head_commit.message, 'Finalizado') || contains(github.event.head_commit.message, 'Finalizar')
        run: |
          JIRA_URL="${{ secrets.JIRA_URL }}"
          JIRA_EMAIL="${{ secrets.JIRA_EMAIL }}"
          JIRA_TOKEN="${{ secrets.JIRA_API_TOKEN }}"
          ISSUE_KEY="${{ steps.extract.outputs.issue }}"
          TRANSITION_ID="${{ steps.transitions.outputs.done_id }}"
          
          curl -s -u "$JIRA_EMAIL:$JIRA_TOKEN" \
            -X POST \
            -H "Content-Type: application/json" \
            -d "{\"transition\":{\"id\":\"$TRANSITION_ID\"}}" \
            "$JIRA_URL/rest/api/2
