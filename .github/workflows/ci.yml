name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


    
jobs:
  build:
    name: Test y Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"
    - name: Instalar Poetry y tox
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        pip install tox

    - name: Test y build con Poetry en tox
      run: poetry run tox

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Despliegue en Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
          service-id: ${{ secrets.SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}
    - name: Esperar estado final
      env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          SERVICE_ID: ${{ secrets.SERVICE_ID }}
      run: |
          # 1. Obtener el último deploy
          DEPLOYS_RESPONSE=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
            "https://api.render.com/v1/services/$SERVICE_ID/deploys")
          DEPLOY_ID=$(echo "$DEPLOYS_RESPONSE" | jq -r '.[0].deploy.id')

          echo "Deploy ID: $DEPLOY_ID"
          # 2. Esperar cambio de estado 
          for i in {1..30}; do
            DEPLOY_INFO=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
              "https://api.render.com/v1/services/$SERVICE_ID/deploys/$DEPLOY_ID")
            CURRENT_STATUS=$(echo "$DEPLOY_INFO" | jq -r '.status')
            if [ "$CURRENT_STATUS" = "live" ]; then
              echo "✅ Despliegue exitoso"
              exit 0
            elif [[ "$CURRENT_STATUS" =~ ^(failed|canceled|crashed)$ ]]; then
              echo "❌ Falló: $CURRENT_STATUS"
              exit 1
            fi
            echo "esperando despliegue..."
            sleep 10
          done
          echo "Timeout: No cambió a estado final en 5 minutos"
          exit 1

  notify:
    name: Enviar notificaciones
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Slack notifica éxito
        if: ${{ needs.build.result == 'success' && needs.deploy.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "✅ El pipeline de CI/CD se completó con éxito!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Slack notifica fracaso
        if: ${{ needs.build.result == 'failure' || needs.deploy.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "❌ El pipeline de CI/CD falló. Por favor, revisá los logs."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
  actualizar-jira:
    needs: [build,deploy]
    runs-on: ubuntu-latest
    if: ${{ needs.build.result == 'success' && needs.deploy.result == 'success' }}
    steps:
      - name: Extract Jira Issue
        id: extract
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ $COMMIT_MSG =~ ([A-Z]+-[0-9]+) ]]; then
            ISSUE=${BASH_REMATCH[0]}
          else
            exit 1
          fi
          # Obtener transiciones disponibles
          TRANSITIONS_RESPONSE=$(curl -s -u "${{ secrets.jira_email }}:${{ secrets.token_api_jira }}" \
            "${{ secrets.jira_url }}/rest/api/2/issue/$ISSUE/transitions" \
            -H "Accept: application/json")
          
          # Determinar la transición basada en el mensaje del commit
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          TRANSITION_NAME=""
          
          if [[ "$COMMIT_MSG" =~ (Iniciando|Iniciar) ]]; then
            TRANSITION_NAME="En curso"
          elif [[ "$COMMIT_MSG" =~ (Completando|Completar|Finalizado|Finalizar) ]]; then
            TRANSITION_NAME="Listo"
          fi
          
          if [ -z "$TRANSITION_NAME" ]; then
            exit 0
          fi
          
          # Obtengo el ID de la transición
          TRANSITION_ID=$(echo "$TRANSITIONS_RESPONSE" | jq -r --arg name "$TRANSITION_NAME" '.transitions[] | select(.name==$name) | .id')
          
          if [ -z "$TRANSITION_ID" ]; then
            exit 1
          fi
          
          # Ejecutar la transición
          curl -s -X POST \
            -u "${{ secrets.jira_email }}:${{ secrets.token_api_jira }}" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            "${{ secrets.jira_url }}/rest/api/2/issue/$ISSUE/transitions" \
            -d "{\"transition\":{\"id\":\"$TRANSITION_ID\"}}"
