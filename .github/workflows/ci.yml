name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


    
jobs:
  build:
    name: Test y Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: "3.13"
    - name: Instalar Poetry y tox
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        pip install tox

    - name: Test y build con Poetry en tox
      run: poetry run tox

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Despliegue en Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
          service-id: ${{ secrets.SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

    - name: Esperar a que Render esté live o falle
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        SERVICE_ID: ${{ secrets.SERVICE_ID }}
      run: |
        echo "Esperando a que el servicio esté en estado final (live o failed)..."
        for i in {1..30}; do
          LATEST_DEPLOY=$(curl -s -H "Authorization: Bearer $RENDER_API_KEY" \
           https://api.render.com/v1/services/$SERVICE_ID/deploys | jq '.[0]')
          STATUS=$(echo "$LATEST_DEPLOY" | jq -r '.status')


          if [ "$STATUS" = "live" ]; then
            echo "Desplegado con éxito ✅"
            exit 0
          elif [[ "$STATUS" =~ ^(build_failed|failed|deactivated)$ ]]; then
            echo "El despliegue falló ❌"
            exit 1
          fi
          sleep 10
        done

        echo "Timeout: el servicio no alcanzó un estado final después de 5 minutos"
        exit 1




  notify:
    name: Enviar notificaciones
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Slack notifica éxito
        if: ${{ needs.build.result == 'success' && needs.deploy.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: "✅ El pipeline de CI/CD se completó con éxito!"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Slack notifica fracaso
        if: ${{ needs.build.result == 'failure' || needs.deploy.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: "❌ El pipeline de CI/CD falló. Por favor, revisá los logs."
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
